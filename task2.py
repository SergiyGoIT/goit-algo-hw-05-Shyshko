def binary_search(arr, target):
    # Ініціалізація змінних для меж пошуку
    left = 0
    right = len(arr) - 1
    iterations = 0
    upper_bound = None

    # Продовжуємо пошук, поки межі не зійдуться
    while left <= right:
        # Збільшуємо лічильник ітерацій
        iterations += 1
        # Обчислюємо середній індекс
        mid = (left + right) // 2

        # Якщо знайдено точний збіг
        if arr[mid] == target:
            # Перевіряємо, чи є менший елемент із таким же значенням
            while mid + 1 < len(arr) and arr[mid + 1] == target:
                mid += 1
            return (iterations, arr[mid])
        
        # Якщо ціль менша за середній елемент, шукаємо в лівій половині
        elif arr[mid] > target:
            # Оновлюємо верхню межу
            upper_bound = arr[mid]
            right = mid - 1
        # Якщо ціль більша за середній елемент, шукаємо в правій половині
        else:
            left = mid + 1

    # Якщо не знайдено точного збігу, повертаємо верхню межу
    # Якщо left >= len(arr), то верхньої межі немає (всі елементи менші за target)
    if left < len(arr):
        upper_bound = arr[left]
    return (iterations, upper_bound)

# Тестування двійкового пошуку
if __name__ == "__main__":
    # Тестовий відсортований масив із дробовими числами
    arr = [1.1, 2.2, 3.3, 4.4, 5.5, 6.6]
    
    # Тест 1: Пошук елемента, який є в масиві
    print(binary_search(arr, 3.3))  # Очікується: (кількість ітерацій, 3.3)
    
    # Тест 2: Пошук елемента, якого немає в масиві
    print(binary_search(arr, 4.0))  # Очікується: (кількість ітерацій, 4.4)
    
    # Тест 3: Пошук значення, більшого за всі елементи
    print(binary_search(arr, 7.0))  # Очікується: (кількість ітерацій, None)
    
    # Тест 4: Пошук значення, меншого за всі елементи
    print(binary_search(arr, 1.0))  # Очікується: (кількість ітерацій, 1.1)